
  /*
  * Copyright (c) 2020 The ZMK Contributors
  *
  * SPDX-License-Identifier: MIT
  */

  #include <behaviors.dtsi>
  #include <dt-bindings/zmk/outputs.h>
  #include <dt-bindings/zmk/keys.h>
  #include <dt-bindings/zmk/bt.h>
  #include <dt-bindings/zmk/ext_power.h>

  #define _BT_SEL_KEYS_ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR

  #include "mouse.dtsi"


  #include "zmk-helpers/helper.h"


  #define DEF_LAYER 0
  #define NUM_LAYER 1
  #define FUN_LAYER 2
  #define CUR_LAYER 3
  #define SYM_LAYER 4
  #define MOS_LAYER 5
  #define SYS_LAYER 6


  /* Global settings */

  #define QUICK_TAP_MS 175

  &sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
  };

  &sl {  // sticky-layer config
      ignore-modifiers;          // allow chording sticky mods & layers
  };

  &lt {  // layer-tap config
      flavor = "balanced";
      tapping-term-ms = <200>;
      quick-tap-ms = <QUICK_TAP_MS>;
  };


  /* Homerow mods */

  #define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
  #define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
  #define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

  #define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
      ZMK_BEHAVIOR(NAME, hold_tap, \
          flavor = "balanced"; \
          tapping-term-ms = <280>; \
          quick-tap-ms = <QUICK_TAP_MS>; \
          require-prior-idle-ms = <150>; \
          bindings = <HOLD>, <TAP>; \
          hold-trigger-key-positions = <TRIGGER_POS>; \
          hold-trigger-on-release; \
      )

  MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
  MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

  MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
  MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
  MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "

  /* Nav cluster */

  // long-tap action on hold, short-tap action on all interrupts
  #define MT_CORE \
      flavor = "tap-preferred"; \
      tapping-term-ms = <220>; \
      quick-tap-ms = <220>; \
      hold-trigger-key-positions = <0>;

  &mt { MT_CORE };
  ZMK_BEHAVIOR(mt_home, hold_tap, bindings = <&masked_home>, <&kp>; MT_CORE)
  ZMK_BEHAVIOR(mt_end,  hold_tap,  bindings = <&masked_end>, <&kp>; MT_CORE)

  #define NAV_LEFT  &mt_home 0   LEFT    // tap: left  | long-tap: beginning of line
  #define NAV_RIGHT &mt_end 0    RIGHT   // tap: right | long-tap: end       of line
  #define NAV_UP    &mt LC(HOME) UP      // tap: up    | long-tap: beginning of document
  #define NAV_DOWN  &mt LC(END)  DOWN    // tap: down  | long-tap: end       of document
  #define NAV_BSPC  &mt LC(BSPC) BSPC    // tap: bspc  | long-tap: delete word backward
  #define NAV_DEL   &mt LC(DEL)  DEL     // tap: del   | long-tap: delete word forward

  // mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document
  #define MASK_MODS(NAME, MODS, BINDING) \
      ZMK_BEHAVIOR(NAME, mod_morph, \
          bindings = <BINDING>, <BINDING>; \
          mods = <MODS>; \
      )
  MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
  MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

  /* Caps-word, num-word and smart-mouse */

  // tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
  ZMK_BEHAVIOR(smart_shft, mod_morph,
      bindings = <&sk LSHFT>, <&caps_word>;
      mods = <(MOD_LSFT)>;
  )
  &caps_word {  // mods deactivate caps-word, requires PR #1451
      /delete-property/ ignore-modifiers;
  };

  {
    keymap {
      compatible = "zmk,keymap";
      default_layer {
        // -----------------------------------------------------------------------------------------------------------------------------------------
        // | =          | 1     | 2    | 3    | 4   | 5   |                                                  | 6   | 7   | 8   | 9   | 0   | \     |
        // | ~          | B     | Y    | O    | U   | '   | ESC      |                            | ESC      | ;   | L   | D   | W   | V   | Z    |
        // | LCTRL      | C     | I    | E    | A   | ,   | LS(LALT) |                            | \        | .   | H   | T   | S   | N   | Q     |
        // | LSHFT      | G     | X    | J    | K   | -   | LtFN DEL | HOME      |  | PG_UP       | LtFN F12 | /   | R  | M   | F   | P   | RSHFT |
        // | LtNUM LEFT | RIGHT | LALT | LGUI | SPACE     | BSPC     | LtNAV END |  | LtNAV PG_DN | DEL      | ENTER     | [   | ]   | UP  | DOWN  |
                  bindings = <
          &kp EQUAL         &kp N1     &kp N2      &kp N3      &kp N4      &kp N5                                                                                           &kp N6    &kp N7      &kp N8      &kp N9      &kp N0      &kp BSLH
          &kp GRAVE         &kp B      &kp Y       &kp O       &kp U       &kp SQT        &kp ESC                                                         &kp ESC               &kp SEMI  &kp L       &kp D       &kp W       &kp V       &kp Z
          &cappy            &hm LGUI C &hm LALT I  &hm LCTRL E &hm LSHFT A &kp COMMA      &lt SYS_LAYER FSLH                                              &lt SYS_LAYER BSLH    &kp DOT   &hm RSHFT H &hm RCTRL T &hm RALT S  &hm RGUI N  &kp Q
          &kp LSHFT         &kp G      &kp X       &kp J       &kp K       &kp MINUS      &lt CUR_LAYER HOME    &lt FUN_LAYER END   &lt FUN_LAYER PG_UP   &lt MOS_LAYER PG_DN   &kp FSLH  &kp R       &kp M       &kp F       &kp P       &sk RSHFT
          &kp LEFT          &kp RIGHT  &kp LGUI    &kp LALT                 &mt LGUI TAB  &kp LCTRL             &lt NUM_LAYER ESC   &lt SYM_LAYER ENTER   &kp SPACE             &mt RSHFT BSPC        &kp LBKT    &kp RBKT    &kp UP      &kp DOWN
        >;

        sensor-bindings = <&inc_dec_kp LEFT RIGHT>;
      };


      num_layer {
        // -------------------------------------------------------------------------------------------------------------------------------
        // | none  | none | none  | none  | none  | none |                                  | none  | NUMLOCK | /   | *   | -     | none |
        // | trans | none | none  | none  | none  | none | trans |                  | trans | none  | 7       | 8   | 9   | +     | none |
        // | trans | none | none  | none  | none  | none | none  |                  | none  | none  | 4       | 5   | 6   | +     | none |
        // | trans | none | none  | none  | none  | none | trans | trans |  | trans | trans | none  | 1       | 2   | 3   | ENTER | none |
        // | trans | none | trans | trans | trans        | trans | trans |  | trans | trans | trans           | 0   | .   | ENTER | none |
            bindings = <
        &none       &none       &kp D       &kp E       &kp F       &none                                               &kp CARET &kp HASH    &kp DLLR    &kp TILDE   &kp MINUS   &kp PIPE
        &caps_word  &kp X       &kp A       &kp B       &kp C       &kp UNDER       &trans                      &trans  &kp PRCNT &kp N7      &kp N8      &kp N9      &kp COLON   &kp K
        &kp KP_NUM  &kp LGUI    &kp LALT    &kp LCTRL   &kp LSHFT   &kp TAB         &none                       &none   &kp PLUS  &kp N4      &kp N5      &kp N6      &kp MINUS   &kp J
        &none       &sk LSHFT   &kp K_UNDO  &kp BSPC    &kp SPACE   &kp RET         &trans    &trans    &trans  &none   &kp STAR  &kp N1      &kp N2      &kp N3      &kp FSLH    &kp LS(G)
        &trans      &none       &kp K_REDO  &kp DEL                 &tog NUM_LAYER  &trans    &trans    &trans  &trans  &trans                &kp N0      &kp DOT     &kp ENTER   &kp AT
            >;
            sensor-bindings = <&inc_dec_kp PG_UP PG_DN>;
      };

    function_layer {
  // --------------------------------------------------------------------------------------------------------------------------------------------------
  // | none  | F1   | F2    | F3    | F4    | F5         |                                  | F6         | F7     | F8     | F9      | F10  | F11  |
  // | trans | none | {     | }     | none  | none       | trans |                  | trans | none       | BT_CLR | BT_PRV | BT_NXT  | none | F12  |
  // | trans | none | (     | )     | none  | reset      | none  |                  | none  | reset      | none   | none   | none    | none | PLAY |
  // | trans | none | [     | ]     | none  | bootloader | trans | trans |  | trans | trans | bootloader | none   | none   | none    | none | none |
  // | trans | none | trans | trans | trans              | trans | trans |  | trans | trans | trans               | REWIND | FASTFWR | none | none |
          bindings = <
              &trans  &none  &none  &none   &none   &none                                                     &kp C_MEDIA_HOME  &kp C_PLAY    &kp C_PREV    &kp C_NEXT  &kp C_STOP    &kp C_EJECT
              &trans  &none  &none  &none   &none   &none           &sys_reset                  &sys_reset    &kp K_WWW         &kp F7        &kp F8        &kp F9      &kp F10       &kp F13
              &trans  &none  &none  &none   &none   &trans          &bootloader                 &bootloader   &kp K_CALC        &kp F4        &kp F5        &kp F6      &kp F11       &kp F14
              &trans  &none  &none  &none   &none   &trans          &trans   &trans    &trans   &trans        &kp C_AL_FILES    &kp F1        &kp F2        &kp F3      &kp F12       &kp F15
              &trans  &none  &trans &trans          &tog FUN_LAYER  &trans   &trans    &trans   &trans        &tog FUN_LAYER                  &kp C_RW      &kp C_FF    &none         &none
          >;
          sensor-bindings = <&inc_dec_kp LEFT RIGHT>;
        };

      cursor_layer {
        bindings = <
          &none  &none      &none       &none       &kp DEL     &kp INS                                        &kp INS     &kp DEL    &none       &none       &none       &none
          &none  &sk LSHFT  &kp K_REDO  &kp K_UNDO  &kp BSPC    &kp K_CUT       &none                   &none  &kp K_CUT   &kp K_UNDO &kp UP      &kp K_REDO  &sk LSHFT   &none
          &none  &kp LGUI   &kp LALT    &kp LCTRL   &kp LSHFT   &kp K_COPY      &none                   &none  &kp K_COPY  &kp LEFT   &kp DOWN    &kp RIGHT   &kp BSPC    &none
          &none  &none      &none       &none       &none       &kp K_PASTE     &kp TAB   &none  &none  &none  &kp K_PASTE &kp HOME   &kp PG_UP   &kp PG_DN   &kp END     &none
          &none  &none      &none       &none                   &tog CUR_LAYER  &none     &none  &none  &none  &tog CUR_LAYER         &kp K_FIND  &none       &none       &none
        >;
        sensor-bindings = <&inc_dec_kp UP DOWN>;
      };



    symbol_layer {
       bindings = <
          &none     &kp GRAVE &kp LPAR   &kp RPAR   &kp SEMI  &kp COMMA                                         &none   &none      &none        &none     &none     &none
          &kp EXCL  &kp LBRC  &kp SQT    &kp DQT    &kp RBRC  &kp QMARK  &kp COLON                      &none   &trans  &kp RSHFT  &kp RCTRL    &kp RALT  &kp RGUI  &none
          &kp HASH  &kp CARET &kp EQUAL  &kp UNDER  &kp DLLR  &kp STAR   &kp SEMI                       &none   &trans  &kp BSPC   &kp TAB      &kp SPACE &kp RET   &none
          &kp TILDE &kp LT    &kp PIPE   &kp MINUS  &kp GT    &kp FSLH   &kp BSLH    &kp DOT    &none   &none   &trans  &kp DEL    &kp LS(TAB)  &none     &none     &none
          &kp AT    &kp AMPS  &kp LBKT   &kp RBKT             &kp PLUS   &kp PRCNT   &kp STAR   &none   &none   &tog SYM_LAYER     &trans       &none     &none     &none
      >;

      sensor-bindings = <&inc_dec_kp LEFT RIGHT>;
    };

    // wait for mouse support
     mouse_layer {
        bindings = <
          &none  &none      &none       &none       &none       &none                                     &none      &none        &none        &none     &none     &none
          &none  U_WH_L     U_WH_D      U_MS_U      U_WH_U      U_WH_R     &none                 &trans  &none      &kp RSHFT    &kp RCTRL    &kp RALT  &kp RGUI  &none
          &none  &none      U_MS_L      U_MS_D      U_MS_R      &none       &none                 &trans  &none      &kp BSPC     &kp TAB      &kp SPACE &kp RET   &none
          &none  &none      &mkp MB4    &mkp MCLK   &mkp MB5    &none       &none   &none   &none &trans  &none      &kp DEL      &kp LS(TAB)  &none     &none     &none
          &none  &none      &none       &none               &none       &none   &none   &none &none   &tog MOS_LAYER          &trans       &none     &none     &none
        >;
        sensor-bindings = <&inc_dec_kp UP DOWN>;
      };

     system_layer {
        bindings = <
          &bt BT_CLR_ALL  &bt BT_CLR    &none         &none &none  &none                                 &none  &none     &none      &none     &none      &none
          &none           &kp C_PWR     &kp C_SLEEP   &none &none  &none    &none                &none   &none  &none     &none      &none     &none      &none
          &none           &kp K_PWR     &kp K_SLEEP   &none &none  &none    &none                &none   &none  &kp RSHFT &kp RCTRL  &kp RALT  &kp RGUI   &none
          &none           _BT_SEL_KEYS_      &none  &none  &none  &none   &none  &none     &none      &none     &none      &none
          &none           &none         &none         &none        &none    &none  &none  &none  &none   &tog SYS_LAYER   &none      &none     &none      &none
        >;
        sensor-bindings = <&inc_dec_kp LEFT RIGHT>;
      };
    };
  };
